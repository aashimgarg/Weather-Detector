{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","API_CALL","json","data","console","log","setState","main","temp","sys","weather","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uQAiBeA,G,6KAbb,OACE,6BACI,wBAAIC,UAAU,WAAd,mBAGA,wBAAIA,UAAU,WAAd,yC,GAPaC,IAAMC,YCQZC,EARF,SAAAC,GAAK,OACjB,0BAAMC,SAAUD,EAAME,YACrB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCSaC,EAbC,SAAAN,GAEf,OACG,yBAAKJ,UAAU,eAChBI,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGZ,UAAU,cAAb,aAAoC,0BAAMA,UAAU,gBAAhB,IAAkCI,EAAMO,KAAxC,KAAkDP,EAAMQ,UAC3HR,EAAMS,aAAe,uBAAGb,UAAU,cAAb,gBAAuC,0BAAMA,UAAU,gBAAhB,IAAkCI,EAAMS,YAAxC,MACzDT,EAAMU,UAAY,uBAAGd,UAAU,cAAb,aAAoC,0BAAMA,UAAU,gBAAhB,IAAkCI,EAAMU,SAAxC,MACtDV,EAAMW,aAAe,uBAAGf,UAAU,cAAb,gBAAuC,0BAAMA,UAAU,gBAAhB,IAAkCI,EAAMW,YAAxC,MAC/DX,EAAMY,OAAS,uBAAGhB,UAAU,gBAAiBI,EAAMY,SCHhDC,EAAU,mCAwEDC,E,4MApEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DAEXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAJ/B,SAMYC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBANjB,cAMLW,EANK,gBAOQA,EAASC,OAPjB,OAOLC,EAPK,OAQXC,QAAQC,IAAIF,GACXnB,GAAMC,EACP,EAAKqB,SAAS,CACZpB,YAAaiB,EAAKI,KAAKC,KACvBxB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKM,IAAIxB,QAClBE,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAM,KAGR,EAAKiB,SAAS,CACbpB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAYK,EACZJ,MAAM,KAzBI,4C,6GA8BX,OACE,6BACA,yBAAKhB,UAAU,WACjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACZ,yBAAKA,UAAU,OAClB,yBAAKA,UAAU,0BACH,kBAAC,EAAD,OAEZ,yBAAKA,UAAU,yBACZ,kBAAC,EAAD,CAAMM,WAAYgC,KAAKhC,aACd,kBAAC,EAAD,CACEO,YAAayB,KAAKnB,MAAMN,YACxBC,SAAUwB,KAAKnB,MAAML,SACrBH,KAAM2B,KAAKnB,MAAMR,KACjBC,QAAS0B,KAAKnB,MAAMP,QACpBG,YAAauB,KAAKnB,MAAMJ,YACxBC,MAAOsB,KAAKnB,MAAMH,kB,GA1DpBf,IAAMC,WCGJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLe,QAAQf,MAAMA,EAAMwC,a","file":"static/js/main.01fd53ee.chunk.js","sourcesContent":["import React from 'react';\n\nclass Titles extends React.Component{\n  render(){\n  return (\n    <div>\n        <h1 className=\"titleh1\">\n           Weather Finder.\n        </h1>\n        <h3 className=\"titleh3\">\n        Please enter correct spellings!!\n        </h3>\n    </div>\n  );\n  }\n}\n\nexport default Titles;\n","import React from \"react\";\n\nconst Form = props => (\n\t<form onSubmit={props.getWeather}>\n\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n\t\t<button>Get Weather</button>\n\t</form>\n);\n\nexport default Form;","import React from 'react';\n\nconst Weather = props =>\n{\n return (\n    <div className=\"weatherInfo\">\n\t {props.city && props.country && <p className=\"weatherKey\"> Location:<span className=\"weatherValue\"> { props.city }, { props.country }</span></p>}\n\t {props.temperature && <p className=\"weatherKey\"> Temperature:<span className=\"weatherValue\"> { props.temperature }\t</span></p>  }\n     {props.humidity && <p className=\"weatherKey\"> Humidity:<span className=\"weatherValue\"> { props.humidity } </span></p> }\n     {props.description && <p className=\"weatherKey\"> Conditions: <span className=\"weathervalue\"> { props.description } </span></p> }\n\t {props.error && <p className=\"weatherError\">{ props.error }</p>}\n\t</div>\n  );\n  }\n\nexport default Weather;\n","import React from 'react';\nimport './App.css';\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n\nconst API_KEY = \"1bf4aee8b109a62081092033b5e3c8a6\";\n\nclass App extends React.Component{\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const API_CALL = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await API_CALL.json();\n    console.log(data);\n  if(city&&country){\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error:''\n    });\n  }else{\n    this.setState({\n     temperature: undefined,\n     city: undefined,\n     country: undefined,\n     humidity: undefined,\n     description:undefined,\n     error:''\n    });   \n}\n  }\n  render() {\n    return (\n      <div>\n      <div className=\"wrapper\">\n    <div className=\"main\">\n      <div className=\"container\">\n         <div className=\"row\">\n      <div className=\"col-xs-5 titleContents\">\n                  <Titles />\n            </div>\n      <div className=\"col-xs-7 formContents\">\n         <Form getWeather={this.getWeather} />\n                  <Weather \n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n           </div>\n      </div>\n          </div>\n          </div>\n          </div>\n         </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}